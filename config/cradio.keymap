// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

//#include "../zmk-nodefree-config/helper.h"
#include "./german_aliases.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define SYM 1
#define MOV 2
#define EXT 3

#define HA(key) &ht LALT key
#define HS(key) &ht LSHFT key
#define HC(key) &ht LCTRL key
#define KP(key) &kp key
#define LAY(layername) &mo layername
#define ST(key) &sk key

/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

//    conditional_layers {
//        compatible = "zmk,conditional-layers";
//        tri_layer {
//            if-layers = <1 2>;
//            then-layer = <3>;
//        };
//    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                KP(DE_Q) KP(DE_W) KP(DE_F) KP(DE_P)  KP(DE_G)    KP(DE_J) KP(DE_L)  KP(DE_U)    KP(DE_Y)   KP(DE_QUES)
                KP(DE_A) HA(DE_R) HS(DE_S) HC(DE_T)  KP(DE_D)    KP(DE_H) HC(DE_N)  HS(DE_E)    HA(DE_I)   KP(DE_O)
                KP(DE_Z) KP(DE_X) KP(DE_C) KP(DE_V)  KP(DE_B)    KP(DE_K) KP(DE_M)  KP(DE_COMM) KP(DE_DOT) KP(DE_MINS)
                                           KP(LSHFT) LAY(MOV)    LAY(SYM) KP(SPACE)
            >;
        };

        symbols {
            bindings = <
            KP(DE_ASTR) KP(DE_HASH) KP(DE_QUOT) KP(DE_DQUO) KP(DE_AMPR)     KP(DE_PIPE) KP(DE_EXLM) KP(DE_EQL)  KP(DE_DLR)  KP(DE_PLUS)
            KP(N1)      KP(N2)      KP(N3)      KP(N4)      KP(N5)          KP(N6)      KP(N7)      KP(N8)      KP(N9)      KP(N0) 
            KP(DE_LABK) KP(DE_LBRC) KP(DE_LPRN) KP(DE_LCBR) KP(DE_SLSH)     KP(DE_BSLS) KP(DE_RCBR) KP(DE_RPRN) KP(DE_RBRC) KP(DE_RABK) 
                                                KP(LSHFT)   LAY(EXT)        &trans      &trans
            >;
        };

        movement {
            bindings = <
                KP(DE_Q) KP(DE_W) KP(DE_F) KP(DE_P)  KP(DE_G)    KP(DE_J) KP(DE_L)  KP(DE_U)    KP(DE_Y)   KP(DE_QUES)
                KP(DE_A) HA(DE_R) HS(DE_S) HC(DE_T)  KP(DE_D)    KP(DE_H) HC(DE_N)  HS(DE_E)    HA(DE_I)   KP(DE_O)
                KP(DE_Z) KP(DE_X) KP(DE_C) KP(DE_V)  KP(DE_B)    KP(DE_K) KP(DE_M)  KP(DE_COMM) KP(DE_DOT) KP(DE_MINS)
                                           KP(LSHFT) LAY(MOV)    LAY(SYM) KP(SPACE)
            >;
        };

//        movement {
//            bindings = <
//                KP(ESC)  LC(DE_W) LC(DE_F)  LC(DE_P) LC(DE_T)     KP(DEL)      KP(HOME)     KP(UP)   KP(END)   KP(PG_UP)
//                &trans   ST(LALT) ST(LSHFT) ST(LCTL) LGUI         KP(BSPC)     KP(LEFT)     KP(DOWN) KP(RIGHT) KP(PG_DN)
//                LC(DE_Z) LC(DE_X) LC(DE_C)  LS(INS)  LA(DE_V)     LC(LA(DE_T)) LC(LS(DE_T)) LS(TAB)  KP(TAB)   &trans
//                                            &trans   &trans       LAY(EXT)     KP(RET)
//            >;
//        };

//        extra {
//            bindings = <
//            KP(DE_CIRC)  KP(DE_PERC) KP(DE_GRV)  KP(DE_TILD) &trans                &trans            KP(F7) KP(F8) KP(F9) KP(F10)
//            KP(TAB)      KP(LALT)    KP(LSFT)    KP(LCTL)    KP(LGUI)              &trans            KP(F4) KP(F5) KP(F6) KP(F11)
//            &bootloader  &reset      &bt BT_CLR  &trans      LS(LA(LC(PG_UP)))     LS(LA(LC(PG_DN))) KP(F1) KP(F2) KP(F3) KP(F12)
//                                                 &trans      &trans                &trans            &trans
//            >;
//        };
    };
};
